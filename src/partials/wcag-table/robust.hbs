<tr>
    <th scope="row" rowspan="5" class="text-nowrap">4 Robust</th>
</tr>

<tr>
    <th scope="row" rowspan="4" class="text-nowrap">4.1 Compatible</th>
</tr>
<tr>
    <td class="text-nowrap">4.1.1 Parsing</td>
    <td>A</td>
    <td>
        Ensure that user agents, including assistive technologies, can accurately interpret and parse content. 
        If the content cannot be parsed into a data structure, then different user agents may present it differently 
        or be completely unable to parse it. Some user agents use "repair techniques" to render poorly coded content.
        Since repair techniques vary among user agents, authors cannot assume that content will be accurately parsed into a data structure.
        <br>
        <strong>It helps: Everyone</strong><br>
        <a href="https://www.w3.org/WAI/WCAG21/Understanding/parsing.html" target="_blank">
            WCAG: Understanding 4.1.1: Parsing
        </a>
    </td>
    <td>
        Use valid HTML.
        <a href="https://validator.w3.org/" target="_blank">The W3C Markup Validation Service</a>
    </td>
</tr>
<tr>
    <td class="text-nowrap">4.1.2 Name, Role, Value</td>
    <td>A</td>
    <td>
        The intent of this Success Criterion is to ensure that Assistive Technologies (AT) can gather information about, activate(or set) and keep up to date on the status of user interface controls in the content.
        A particularly important state of a user interface control is whether or not it has focus. The focus state of a control can be programmatically determined, and notifications about change of focus are sent 
        to user agents and assistive technology. Other examples of user interface control state are whether or not a checkbox or radio button has been selected, or whether or not a collapsible tree or list node is expanded or collapsed.
        <br>
        <strong>It helps: Visually impaired</strong><br>
        <a href="https://www.w3.org/WAI/WCAG21/Understanding/name-role-value.html" target="_blank">
            WCAG: Understanding 4.1.2: Name, Role, Value
        </a>
    </td>
    <td>
        If standard controls are used in their default manner, this condition will be met. But custom widgets (of span/divs etc) should have name and role assigned (ARIA is used appropriately).
        Also use tabindex=0 to make it focusable.<br>
        If an image is changed via scripting, its alt text should be changed along with it.
    </td>
</tr>
<tr>
    <td class="text-nowrap table-info" aria-label="4.1.3 Status Messages, New in WCAG 2.1">4.1.3 Status Messages</td>
    <td>AA</td>
    <td>
        The intent of this Success Criterion is to make users aware of important changes in content that are not given focus, and to do so in a way that doesn't unnecessarily interrupt their work.
        The scope of this Success Criterion is specific to changes in content that involve status messages.
        <br><br>
        This Success Criterion specifically addresses scenarios where new content is added to the page without changing the user's context. 
        Changes of context, by their nature, interrupt the user by taking focus. They are already surfaced by assistive technologies, 
        and so have already met the goal to alert the user to new content.
        <br><br>
        Information can be added to pages which does not meet the definition of a status message. For example, the list of results obtained from a search are not considered a status update and 
        thus are not covered by this Success Criterion. However, brief text messages displayed about the completion or status of the search, such as "Searching...", "18 results returned" or 
        "No results returned" would be status updates if they do not take focus.
        <br>
        <strong>It helps: Visually impaired, cognitive impaired</strong><br>
        <a href="https://www.w3.org/WAI/WCAG21/Understanding/status-messages.html" target="_blank">
            WCAG: Understanding 4.1.3: Status Messages
        </a>
    </td>
    <td>
        Make sure assistive technologies can recieve status messages that are not given focus (either programmatically or naturally because of change of context).

        <br><br>
        <em>
            Opening a new window, moving focus to a different component, going to a new page (including anything that would look to a user as if they had moved to a new page), 
            opening a modal, or significantly re-arranging the content of a page are examples of changes of context.
        </em>
        <br><br>

        Also communicate when status messages are hidden. <br>
        Use role=status. <br>
        Use aria-live=assertive or role=alert for error/warning messages.<br>
        role=alert is equivalent to using aria-live=assertive.<br>
        There is also aria-live=polite <br>
        <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA/ARIA_Live_Regions" target="_blank">MDN: ARIA live regions</a>, 
        string search for "Preferring specialized live region roles", also for "aria-atomic". <br><br>

        The container must be present in the DOM on page load for the message to be spoken by most screen readers. (<- string search), also for "aria-atomic".<br>
        <a href="https://www.w3.org/WAI/WCAG21/Techniques/aria/ARIA19" target="_blank">ARIA19: Using ARIA role=alert or Live Regions to Identify Errors</a>
    </td>
</tr>
