{{#> base title="Accessibility: Testing and Screen Reader Use" homeref="../" }}
{{#*inline "content"}}

<article class="col-lg-8">
    <h2>Accessibility: Testing and Screen Reader Use</h2>
    <p>
        <a href="https://app.pluralsight.com/library/courses/accessibility-testing-and-screen-reader/table-of-contents"
            target="_blank">Link to course</a>
    </p>

    <h3 class="h4">Course Overview</h3>
    <p>
        Testing for accessibility should be embedded in our daily workflow. 
        There are tools to help us, but we also need to test manually with for example screen readers.
    </p>
    <p>
        In this course we cover: 
    </p>
    <ul>
        <li>Testing with different input modalities, like keyboard, touch and voice.</li>
        <li>Doing static code analysis, like HTML validation and inspecting source code in the browser.</li>
        <li>Testing with screen readers NVDA, JAWS and Voice Over (Mac OS and iOS).</li>
    </ul>

    <h3 class="h4">Basic Testing Techniques</h3>
    <h4 class="h5">Physical</h4>
    <p>
        About 14% of the population has some form av physical dissability.
    </p>
    <p>
        The single most important thing to do is test the interface with the keyboard. It will give an indication of the support for other inputs as well. 
        Links, buttons and form elements are focusable elements that we should be able to tab to, and activate by enter key. 
        It is also important that the focus indicator is easy to see. Also try to not use several different variants of focus indicators.
    </p>
    <p>
        Preferebly the first tab stop on a page should be skip links, that lets a user skip to the main content.
    </p>
    <p>
        document.activeElement in Chrome Developer Tools Console, will return the current element that has focus.
    </p>
    <p>
        Radios uses so called widget navigation (tab to them, navigate inside the group with arrow keys, select with space).
    </p>
    <p>
        Form controls are usally activated with space key (sometime enter to select an option in a select). Links and buttons are usally activated using enter key. 
        Can differ between operating systems.
    </p>
    <p>
        Logical tab order, and no keyboard trap is also important. Also when tabbing to an element, there should never be a change of context (route change, reload, automatic move focus).
    </p>
    <h5 class="h6">Touch and Voice</h5>
    <p>
        Gestures / motion, users should also be able to click a button or some other alternative control.
    </p>
    <p>
        Pointer cancelation is important, onUp event should be used (default with links and buttons).
    </p>
    <p>
        Label in name.
    </p>
    <p>
        User should have enough time. Turn off, adjust, give user option to extend (atleast 10 times).
    </p>
    <p>
        Test for orientation, should not be locked to one viewport.
    </p>
    <h4 class="h5">Vision</h4>
    <p>
        Blind, low vision (including color blindness).
    </p>
    <p>
        Test for zoom (400%), text sizing (200%), reflow. Does everything work and look ok? Does responsive media queries hide things (for "mobile")? Could be a problem... 
        Should generally not need to scroll in both directions.
    </p>
    <p>
        Text spacing, etc, user should be able to change typography (see tools). Does everything work and look ok?
    </p>
    <p>
        Use color effectivly. Dont use color alone to indicate meaning (remember to underline links in paragraphs).
    </p>
    <p>
        Chrome Developer Tools has a Rendering tab (more tools), that can simulate color blindness and other. Also remember the Accessibility tab under Elements.
    </p>
    <p>
        Contrast is important, see tools. It is important to remember to check text contrast when text overlays an image and text is resized.
    </p>
    <p>
        Status updates should be communicated.
    </p>
    <p>
        Video should have transcripts (spoken words and "events") (will satisfy both users that can not see and can not hear the media -- can be read out loud, translated to braile, seen visually and resized). 
        Paus, stop, hide. Dont auto start the media.
    </p>
    <p>
        Pop up and tooltip, be careful so not covering content. Hover AND focus should open it. 
        Dismiss with ESC, hovering off / blur only. Stay persistent on scroll, rezise and hovering inside tooltip (and copy the content).
    </p>
    <h4 class="h5">Cognitive</h4>
    <p>
        Probebly the largest category of dissabilities. The determine how people process information and areas of attention, memory, language, problem solving and comprehension. 
    </p>
    <p>
        Content should be easy to understand and operable.
    </p>
    <p>
        Prevent distraction, like animations (users should be able to turn off / pause / hide) and flashes (avoid). 
        Chrome Developer Tools, Rendering Tab, has an option, Emulate CSS media feature prefers reduced motion, if this stops animation, 
        it means the developer has used CSS that respect system settings regarding animation. 
        <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion">prefers-reduced-motion | MDN</a>. 
        Some animations are necessary like loading animations or progress bars.
    </p>
    <p>
        Make sure the language is understandable. Dont point to sensory characteristics. Use correct lang attribute. Explain unusual words / abbreviations.
    </p>
    <h4 class="h5">Hearing</h4>
    <p>
        Audio needs some text alternative. Use a transcript. A deaf user could use captions.
    </p>
    <p>
        Controls for: Paus, Stop, Hide the media. Dont automatically start media.
    </p>

    <h3 class="h4">Static Code Analysis</h3>
    <p>
        To be effective when testing accessibility, you have to understand HTML and aria.
    </p>
    <h4 class="h5">HTML Validation</h4>
    <p>
        See 4.1.1 Parsing, and use <a href="https://validator.w3.org/" target="_blank">The W3C Markup Validation Service</a>
    </p>
    <p>
        There is also an experimental new validator <a href="https://validator.w3.org/nu/" target="_blank">The W3C Markup Validation Service -- nu</a>
    </p>

    <h4 class="h5">Also see</h4>
    <p>
        <a href="web-accessibility-meeting-guidelines.html#html">Pluralsight Course on Meeting Web Accessibility Guidelines (WCAG 2.1), section on HTML.</a>
    </p>

    <h4 class="h5">Document Attributes</h4>
    <p>
        HTML validation might have picked up on some of these stuff. But also need to test manually. 
        Use Chrome Developer Tools.
    </p>
    <ul>
        <li>Valid doctype</li>
        <li>HTML tag with lang attribute</li>
        <li>Also use lang attribute on elements with text in other languages</li>
        <li>charset</li>
        <li>Title tag (unique and describe the page)</li>
    </ul>
    <h4 class="h5">Landmarks</h4>
    <p>
        Landmarks are important for semantics and for use as bypass blocks by assistive technology
        (we can also use manually skiplinks for keyboard users without assistive technology).
    </p>
    <p>
        These landmarks are: 
    </p>
    <ul>
        <li>Header</li>
        <li>Nav</li>
        <li>Main</li>
        <li>Footer</li>
        <li>Aside</li>
    </ul>
    <p>
        Form and Section are not landmarks, but would be if the have an accessible name provided via: 
        aria-label, aria-labelledby or the title attribute.
    </p>
    <p>
        The HTML validator will check for these, but we can check manually as well.
    </p>
    <p>
        Not all pages will use all these, but at a minimum we should find the main tag.
    </p>
    <p>
        We can use Chrome Developer Tools, Elements tab and search for these tags.
    </p>
    <h4 class="h5">Headings</h4>
    <p>
        Having propert headings is really important. Use h1 (one per page, preferebly matching the title) to h6, in logical order. 
        AT can lists these and jump to them (and use them as bypass blocks along with landmarks). 
        They are a table of contents for the page.
    </p>
    <p>
        Inspect the code, Chrome Developer Tools. Check headings and search for headings, check order.
    </p>
    <h4 class="h5">Buttons and Links</h4>
    <p>
        Links are for navigation, change of context. Buttons are for actions.
    </p>
    <p>
        Links should have unique text and not have text like "read more" (see coding lab).
    </p>
    <p>
        The visuall label should preferebly match the accessible name.
    </p>
    <p>
        Remember the Google Chrome Accessibility Tab.
    </p>
    <p>
        Navigation links should be in the same order, accross all pages.
    </p>
    <p>
        Use consistent names for actions, such as submitting a form (for example dont mix "Submit", "Post", "Go").
    </p>
    <h4 class="h5">Images</h4>
    <p>
        Provide text alternative (that make sense), very important, first WCAG guideline.
    </p>
    <ul>
        <li>alt attribute</li>
        <li>aria-label</li>
        <li>aria-labelledby</li>
    </ul>
    <p>
        If image is nested in the a tag (and no text in the a tag), for example the logo (link to home page), 
        the alt text is calculated for the link text. If the a tag contains text, the accessibility link text 
        could be duplicate, consider using aria-hidden for the image (presentational only) and an empty alt="" attribute.
    </p>
    <p>
        Avoid images of text, for rezise reasons (logos are an exception, but prefer scalable SVG).
    </p>
    <h4 class="h5">Lists</h4>
    <p>
        ul or ol (for example steps) use correctly.
    </p>
    <h4 class="h5">Tables</h4>
    <p>
        Display tabular data. Use correctly. Use column headers (th in tr in thead), set scope, but if 
        omitted the browser calculates it to the best of its ability. 
        <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-scope" target="_blank">MDN - Scope</a>
    </p>
    <p>
        Try to avoid complex tables.
    </p>
    <h4 class="h5">Forms</h4>
    <ul>
        <li>Use correct input type, for example type="email"</li>
        <li>Correct labels with for attribute</li>
        <li>No placeholder</li>
        <li>required attribute</li>
        <li>auto-complete attribute</li>
        <li>Give instructions</li>
        <li>Use novalidate attribute on form, for manual validation</li>
        <li>Use fieldset and legend (must be first child of fieldset element)</li>
        <li>Disabled attribute -- should we use?</li>
        <li>Use text, color and preferebly an icon also, for validation messages</li>
        <li>Also use aria-invalid</li>
        <li>Use aria-describedby to connect invalid field with error message</li>
    </ul>

    <h3 class="h4">Testing Tools</h3>
    <p>
        These tools purpose is to automate some of the tests we did earlier.
        We need manual testing though. The automated tools captures about 40% of accessibility shortcommings.
    </p>
    <h4 class="h5">Browser Plugins</h4>
    <ul>
        <li>WAVE, by WebAim (Chrome, Firefox)</li>
        <li>Tenon Check (Chrome, Firefox, Opera) (Need API key and registration)</li>
        <li>Axe, by Deque (Chrome) (Free version and paid version)</li>
    </ul>
    <h4 class="h5">Developer Tools</h4>
    <ul>
        <li>eslint-plugin-jsx-a11y (included in CreateReactApp)</li>
        <li>Axe Core (use with unit tests, for example jest-axe)</li>
    </ul>

    <h3 class="h4">Testing with Screen Readers</h3>
    <p>
        This is a very important step in the testing process.
    </p>
    <h4 class="h5">Screen Reader Myths</h4>
    <h5 class="h6">"Screen Readers are only used by blind people"</h5>
    <p>
        No! Screen readers are also used by people with low vision, cognitive disability and physical disability. 
        When making content visible only for screen readers (aria-label, .sr-only) ask yourself if all users will benefit. 
        It can be confusing if the visual user experience and screen reader experience differ too much.
    </p>
    <h5 class="h6">"Screen Readers users are early adopters"</h5>
    <p>
        Dont asume these users are using the latest version of screen readers or browsers. 
        Some of these tools can be expensive. Also some users might rely on their employer to upgrade and they might not be on a fast schedule to do so. 
        Also screen reader users depend heavily on these tools, and might gotten used to a version and its setting, and not wanting to upgrade.
    </p>
    <h5 class="h6">"Screen Readers users are expert users / testers"</h5>
    <p>
        The experience with these tools can vary. Also dont asume that all screen reader users are eager to test your interface for free.
    </p>
    <h5 class="h6">"Automatically reading content means screen reader support"</h5>
    <p>
        Reading text on a page is the bare minimum a screen reader can do. 
        Screen reader support means proper navigation, and announcing semantics and state of all elements.
    </p>
    <h5 class="h6">"Screen reader users read from top to bottom"</h5>
    <p>
        No! They scan the page, looking for landmarks, headings, links and specific controls.
    </p>
    <h5 class="h6">"Screen reader users only use the TAB key"</h5>
    <p>
        No! They use the TAB key and a lot of other shortcuts.
    </p>
    <h4 class="h5">Screen Reader Modes</h4>
    <p>
        Shortcuts depend on which mode the user is in.
    </p>
    <p>
        There are mainly 2 modes (technically 3) and mostly apply to Windows screen readers.
    </p>
    <h5 class="h6">Browse Mode</h5>
    <p>
        This is the default mode. And has the largest sets of shortcuts and interactions. 
    </p>
    <p>
        Just as a sighted user might scan the page, a screen reader user can do the same, jumping to elements: 
        Headings, Tables, Links, Buttons, Forms, Landmarks, Lists, Images.
    </p>
    <p>
        Common shortcuts for NVDA (Windows) and JAWS (Windows):
    </p>
    <ul>
        <li>h for next heading and 1-6 for a specific heading level</li>
        <li>t for tables</li>
        <li>b for buttons</li>
        <li>g for graphics</li>
        <li>tab for navigating interactive controls</li>
        <li>shift tab will navigate in reverse order</li>
    </ul>
    <p>
        In browse mode, content can be discovered in different increment, mostly using arrow keys.
    </p>
    <ul>
        <li>UP / DOWN key reads previous / next line</li>
        <li>MODIFIER KEY (CTRL or INSERT) + LEFT / RIGHT reads previous / next word</li>
        <li>LEFT / RIGHT reads previous / next character</li>
    </ul>
    <h5 class="h6">Forms (or focus) Mode</h5>
    <p>
        This is the mode that is required to interact with form elements. 
        Assuming proper semantics are being used, the screen reader will automatically 
        switch between Browse Mode and Forms Mode.
    </p>
    <p>
        In this mode the normal shortcuts wont work, for example h or t, since that would hinder the user from typing in form fields. 
        Instead these keys are passed to the browser, so the form can be filled out.
    </p>
    <h5 class="h6">Application Mode</h5>
    <p>
        It is like a combination of Browse Mode and Forms Mode under a very specific context. 
        Custom widgets have specific interaction that requires this special mode. This mode is 
        the same as Browse Mode in the sense that specific keys is used to operate the interface, 
        but the keys are not automatically provided by the screen reader, they are provided with JavaScript. 
        So the keys are passed to the browser, like in Form Mode, but picked up by JavaScript logic.
    </p>
    <p>
        So for example the LEFT / RIGHT arrow keys might be used to navigate tabs in a widget, 
        instead of the default behavior, reading one character at a time. 
        Or using ESC to close a modal.
    </p>
    <h5 class="h6">Do not mix keyboard testing with Screen Reader testing</h5>
    <p>
        It is very important to recognize these different modes and how keys are affected.
    </p>
    <h4 class="h5">Testing with NVDA</h4>
    <p>
        Only on Windows. Free to use. Firefox works best with it.
        NVDA stands for Non Visual Desktop Access.
    </p>
    <p>
        CAPS LOCK or INSERT (default) are usually the NVDA Modifier Keys.
    </p>
    <p>
        Tools > Speach Viewer will help see what is announced.
    </p>
    <p>
        Upon navigating to a site NVDA will start reading the page from top to bottom.
        Normally, screen reader users wont use the screen reader in this way.
    </p>
    <p>
        The CTRL key is the single most important key, it will stop the screen reader from announcing content.
    </p>
    <h5 class="h6">Up / Down Keys</h5>
    <p>
        Use up / down keys to navigate.
    </p>
    <p>
        Remember empty alt attribute makes NVDA skip announcing an image.
    </p>
    <p>
        Read More Link is problematic, use aria-labelledby (point to header and link text) or aria-label.
    </p>
    <p>
        Proper semantic for ul helps the Screen Reader user to know how many items, can skip them.
    </p>
    <p>
        When down arrow just repeats the last item announced, it means we have reached the end of the page. 
    </p>
    <h5 class="h6">Tab Key</h5>
    <p>
        Use Tab Key to navigate focusable elements (skips static content).
    </p>
    <p>
        When tabbing to an input, NVDA changes from Browse Mode to Focus Mode (Forms Mode).
    </p>
    <p>
        When navigating in a widget, aria state and properties really help, aria-expanded.
        Press SPACE (or ENTER) to expand, and down arrow to navigate to the static content.
    </p>
    <p>
        Forms. Semantics are important. Up/Down Key will read radio items as content, select with SPACE, TABS exits. 
    </p>
    <p>
        ESC exits Focus Mode (Forms Mode), ENTER re enters it. Can also use NVDA Modifier Key and SPACE Key.
    </p>
    <h5 class="h6">Short Cuts</h5>
    <table class="table">
        <thead>
            <tr>
                <th>Key</th>
                <th>Means</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>d</td>
                <td>Landmarks</td>
            </tr>
            <tr>
                <td>h</td>
                <td>Headings</td>
            </tr>
            <tr>
                <td>1-6</td>
                <td>Heading Levels</td>
            </tr>
            <tr>
                <td>t</td>
                <td>Tables</td>
            </tr>
            <tr>
                <td>k</td>
                <td>Links</td>
            </tr>
            <tr>
                <td>b</td>
                <td>Buttons</td>
            </tr>
            <tr>
                <td>l</td>
                <td>Lists</td>
            </tr>
            <tr>
                <td>i</td>
                <td>Lists, navigate items</td>
            </tr>
            <tr>
                <td>g</td>
                <td>Graphics (with alt text and not aria-hidden)</td>
            </tr>
            <tr>
                <td>SHIFT</td>
                <td>Navigates these in reverse</td>
            </tr>
        </tbody>
    </table>
    <p>
        There should at least be a main landmark.
    </p>
    <p>
        Table will put us in Application Mode, because special "widget" keys apply.
        Can use up/down arror, but CTRL + ALT + Arrow will navigate more effectivly in any direction.
    </p>
    <h5 class="h6">Elements List</h5>
    <p>
        NVDA Key + F7 , will bring up the Elements List.
    </p>
    <p>
        It will list: Links, Headings, Form Fields, Buttons and Landmarks.
        Can filter, Activate, Move To.
    </p>

    <h4 class="h5">Testing with JAWS</h4>
    <p>
        Job Access With Speach. Propebly the most well known, and popular, Screen Reader, but not free.
        Works best with Chrome.
    </p>
    <p>
        JAWS also has a setting for showing speach output in text, similar to NVDA.
    </p>
    <p>
        JAWS also has a modifer key, called the JAWS key, default is INSERT, but can change to CAPS LOCK or SCROLL LOCK.
    </p>
    <p>
        JAWS works best when first starting JAWS, then starting Chrome.
    </p>
    <p>
        Upon navigating to a site, JAWS will start reading from start to bottom. Again, most Screen Reader users wont use it like this.
    </p>
    <p>
        Use the CTRL key to stop the announcing.
    </p>
    <p>
        Can use the arrow keys (down/up) to navigate just as with NVDA.
    </p>
    <p>
        Just like NVDA, JAWS will switch to Forms Mode when navigating to the search input (JAWS uses a different tone).
    </p>
    <p>
        Looping back to top content is signaling that we have reached the end of the page.
        This is different from NVDA, which just repeats the last content.
    </p>
    <p>
        Use TAB key to focus on focusable items. JAWS provides tips for interactions, like "activate with enter key",
        these tips can be turned of in settings (many experienced screen reader users will turn them off). 
        The tips are based on the semantics of the elements.
    </p>
    <p>
        JAWS will announced widgets, like an accordian, as collapsed or expanded.
    </p>
    <p>
        JAWS does not announce info about number of items in a SELECT (unlike NVDA).
    </p>
    <p>
        ENTER / ESC keys will toggle Forms and Browse Mode.
    </p>
    <p>
        Use arrow keys to navigate radios, use SPACE to select.
    </p>
    <table class="table">
        <thead>
            <tr>
                <th>Key</th>
                <th>Means</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>r</td>
                <td>Landmarks (regions)</td>
            </tr>
            <tr>
                <td>h</td>
                <td>Headings</td>
            </tr>
            <tr>
                <td>1-6</td>
                <td>Heading Levels</td>
            </tr>
            <tr>
                <td>t</td>
                <td>Tables</td>
            </tr>
            <tr>
                <td>u</td>
                <td>Unvisited Links</td>
            </tr>
            <tr>
                <td>v</td>
                <td>Visited Links</td>
            </tr>
            <tr>
                <td>b</td>
                <td>Buttons</td>
            </tr>
            <tr>
                <td>l</td>
                <td>Lists</td>
            </tr>
            <tr>
                <td>g</td>
                <td>Graphics</td>
            </tr>
            <tr>
                <td>SHIFT</td>
                <td>Navigates these in reverse</td>
            </tr>
        </tbody>
    </table>
    <h5 class="h6">Virtual HTML Features</h5>
    <p>
        Provides way more options than NVDA Elements List.
    </p>
    <p>
        JAWS + F3 , will bring up the Virtual HTML Features List.
    </p>
    <p>
        Dialog shows a lot of categories, for example Buttons, Paragraphs, Links (about 20 categories). 
        Select a category with ENTER key to get a list of, for example, all links on the page.
        In the next dialog with all the links, they can be sorted (in tab order or in alphabetically order),
        further filtered showing visited links or unvisited links.
        Can also move to it or activate it.
    </p>

    <h4 class="h5">Testing with Voice Over</h4>
    <p>
        Only for iOS and Mac OS. Lots of users.
    </p>
    <p>
        Some similarities with NVDA but also some differences.
    </p>
    <p>
        CTRL + OPTION is the default modifer key, the Voice Over Key, but can change it.
    </p>
    <p>
        Web Rotor is Voice Overs version av NVDAs Elements List and JAWS Virtual HTML Features.
    </p>
    <h5 class="h6">Key Differences between Voice Over and NVDA/JAWS</h5>
    <p>
        There are no modes (browse/form/application), all interactions are dependent on the keys we use.
    </p>
    <p>
        Browse Mode = Voice Over Key + some other key. <br>
        Forms Mode = Not using the Voice Over Key.
    </p>
    <p>
        Another difference is that Voice Over will navigate some elements as groups.
        For example with NVDA, on browse mode, have to traverse every item in a list, if using the arrow keys.
        With Voice Over, on the other hand, skips the items, if using the arrow keys, but can choose to go into the lists items.
        Once entering the group we are limited to that group, until exiting the group. 
    </p>
    <h5 class="h6">General Navigation</h5>
    <p>
        Start Voice Over with COMMAND + F5. <br>
        CTRL key stops announcements (just like NVDA and JAWS).
    </p>
    <p>
        Log window is on by default. It provides tips on how to interact with content.
    </p>
    <p>
        Voice Over Key + left/right arrow navigates items (like up/down with NVDA).
    </p>
    <p>
        Voide Over Key + SHIFT + right arrow will skip a group. <br>
        Voide Over Key + SHIFT + left arrow will revisit the group. <br>
        Voide Over Key + SHIFT + down will enter into the group. <br>
        Voice Over Key + right arrow will navigate inside the group.
    </p>
    <p>
        Tab key sets focus on a focusable element.
        Tab does not loop back to top.
    </p>
    <p>
        Voice Over announces widget semantics (collapsed/expanded accordian).
    </p>
    <p>
        In a form, need to use VoiceOver key and space to open SELECT, space to select item.
        Use VoiceOver key and left/right arrow key to navigate radios, select with space.
    </p>
    <table class="table">
        <thead>
            <tr>
                <th>Key</th>
                <th>Means</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>Voice Over + COMMAND + h</td>
                <td>Headings</td>
            </tr>
            <tr>
                <td>Voice Over + COMMAND + t</td>
                <td>Tables</td>
            </tr>
            <tr>
                <td>Voice Over + COMMAND + l</td>
                <td>Links</td>
            </tr>
            <tr>
                <td>Voice Over + COMMAND + j</td>
                <td>Form Controls</td>
            </tr>
            <tr>
                <td>Voice Over + COMMAND + x</td>
                <td>Lists</td>
            </tr>
            <tr>
                <td>Voice Over + COMMAND + g</td>
                <td>Graphics</td>
            </tr>
            <tr>
                <td>SHIFT</td>
                <td>Navigates these in reverse</td>
            </tr>
        </tbody>
    </table>
    <h5 class="h6">Web Rotor</h5>
    <p>
        VoiceOver key + u. Use LEFT/RIGHT arrow key to navigate between categories of content.
    </p>
</article>

{{/inline}}
{{/base}}