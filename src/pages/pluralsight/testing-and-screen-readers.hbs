{{#> base title="Accessibility: Testing and Screen Reader Use" homeref="../" }}
{{#*inline "content"}}

<article class="col-lg-8">
    <h2>Accessibility: Testing and Screen Reader Use</h2>
    <p>
        <a href="https://app.pluralsight.com/library/courses/accessibility-testing-and-screen-reader/table-of-contents"
            target="_blank">Link to course</a>
    </p>

    <h3 class="h4">Course Overview</h3>
    <p>
        Testing for accessibility should be embedded in our daily workflow. 
        There are tools to help us, but we also need to test manually with for example screen readers.
    </p>
    <p>
        In this course we cover: 
    </p>
    <ul>
        <li>Testing with different input modalities, like keyboard, touch and voice.</li>
        <li>Doing static code analysis, like HTML validation and inspecting source code in the browser.</li>
        <li>Testing with screen readers NVDA, JAWS and Voice Over (Mac OS and iOS).</li>
    </ul>

    <h3 class="h4">Basic Testing Techniques</h3>
    <h4 class="h5">Physical</h4>
    <p>
        About 14% of the population has some form av physical dissability.
    </p>
    <p>
        The single most important thing to do is test the interface with the keyboard. It will give an indication of the support for other inputs as well. 
        Links, buttons and form elements are focusable elements that we should be able to tab to, and activate by enter key. 
        It is also important that the focus indicator is easy to see. Also try to not use several different variants of focus indicators.
    </p>
    <p>
        Preferebly the first tab stop on a page should be skip links, that lets a user skip to the main content.
    </p>
    <p>
        document.activeElement in Chrome Developer Tools Console, will return the current element that has focus.
    </p>
    <p>
        Radios uses so called widget navigation (tab to them, navigate inside the group with arrow keys, select with space).
    </p>
    <p>
        Form controls are usally activated with space key (sometime enter to select an option in a select). Links and buttons are usally activated using enter key. 
        Can differ between operating systems.
    </p>
    <p>
        Logical tab order, and no keyboard trap is also important. Also when tabbing to an element, there should never be a change of context (route change, reload, automatic move focus).
    </p>
    <h5 class="h6">Touch and Voice</h5>
    <p>
        Gestures / motion, users should also be able to click a button or some other alternative control.
    </p>
    <p>
        Pointer cancelation is important, onUp event should be used (default with links and buttons).
    </p>
    <p>
        Label in name.
    </p>
    <p>
        User should have enough time. Turn off, adjust, give user option to extend (atleast 10 times).
    </p>
    <p>
        Test for orientation, should not be locked to one viewport.
    </p>
    <h4 class="h5">Vision</h4>
    <p>
        Blind, low vision (including color blindness).
    </p>
    <p>
        Test for zoom (400%), text sizing (200%), reflow. Does everything work and look ok? Does responsive media queries hide things (for "mobile")? Could be a problem... 
        Should generally not need to scroll in both directions.
    </p>
    <p>
        Text spacing, etc, user should be able to change typography (see tools). Does everything work and look ok?
    </p>
    <p>
        Use color effectivly. Dont use color alone to indicate meaning (remember to underline links in paragraphs).
    </p>
    <p>
        Chrome Developer Tools has a Rendering tab (more tools), that can simulate color blindness and other. Also remember the Accessibility tab under Elements.
    </p>
    <p>
        Contrast is important, see tools. It is important to remember to check text contrast when text overlays an image and text is resized.
    </p>
    <p>
        Status updates should be communicated.
    </p>
    <p>
        Video should have transcripts (spoken words and "events") (will satisfy both users that can not see and can not hear the media -- can be read out loud, translated to braile, seen visually and resized). 
        Paus, stop, hide. Dont auto start the media.
    </p>
    <p>
        Pop up and tooltip, be careful so not covering content. Hover AND focus should open it. 
        Dismiss with ESC, hovering off / blur only. Stay persistent on scroll, rezise and hovering inside tooltip (and copy the content).
    </p>
    <h4 class="h5">Cognitive</h4>
    <p>
        Probebly the largest category of dissabilities. The determine how people process information and areas of attention, memory, language, problem solving and comprehension. 
    </p>
    <p>
        Content should be easy to understand and operable.
    </p>
    <p>
        Prevent distraction, like animations (users should be able to turn off / pause / hide) and flashes (avoid). 
        Chrome Developer Tools, Rendering Tab, has an option, Emulate CSS media feature prefers reduced motion, if this stops animation, 
        it means the developer has used CSS that respect system settings regarding animation. 
        <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion">prefers-reduced-motion | MDN</a>. 
        Some animations are necessary like loading animations or progress bars.
    </p>
    <p>
        Make sure the language is understandable. Dont point to sensory characteristics. Use correct lang attribute. Explain unusual words / abbreviations.
    </p>
    <h4 class="h5">Hearing</h4>
    <p>
        Audio needs some text alternative. Use a transcript. A deaf user could use captions.
    </p>
    <p>
        Controls for: Paus, Stop, Hide the media. Dont automatically start media.
    </p>

    <h3 class="h4">Static Code Analysis</h3>
    <p>
        To be effective when testing accessibility, you have to understand HTML and aria.
    </p>
    <h4 class="h5">HTML Validation</h4>
    <p>
        See 4.1.1 Parsing, and use <a href="https://validator.w3.org/" target="_blank">The W3C Markup Validation Service</a>
    </p>
    <p>
        There is also an experimental new validator <a href="https://validator.w3.org/nu/" target="_blank">The W3C Markup Validation Service -- nu</a>
    </p>

    <h4 class="h5">Also see</h4>
    <p>
        <a href="web-accessibility-meeting-guidelines.html#html">Pluralsight Course on Meeting Web Accessibility Guidelines (WCAG 2.1), section on HTML.</a>
    </p>

    <h4 class="h5">Document Attributes</h4>
    <p>
        HTML validation might have picked up on some of these stuff. But also need to test manually. 
        Use Chrome Developer Tools.
    </p>
    <ul>
        <li>Valid doctype</li>
        <li>HTML tag with lang attribute</li>
        <li>Also use lang attribute on elements with text in other languages</li>
        <li>charset</li>
        <li>Title tag (unique and describe the page)</li>
    </ul>
    <h4 class="h5">Landmarks</h4>
    <p>
        Landmarks are important for semantics and for use as bypass blocks by assistive technology
        (we can also use manually skiplinks for keyboard users without assistive technology).
    </p>
    <p>
        These landmarks are: 
    </p>
    <ul>
        <li>Header</li>
        <li>Nav</li>
        <li>Main</li>
        <li>Footer</li>
        <li>Aside</li>
    </ul>
    <p>
        Form and Section are not landmarks, but would be if the have an accessible name provided via: 
        aria-label, aria-labelledby or the title attribute.
    </p>
    <p>
        The HTML validator will check for these, but we can check manually as well.
    </p>
    <p>
        Not all pages will use all these, but at a minimum we should find the main tag.
    </p>
    <p>
        We can use Chrome Developer Tools, Elements tab and search for these tags.
    </p>
    <h4 class="h5">Headings</h4>
    <p>
        Having propert headings is really important. Use h1 (one per page, preferebly matching the title) to h6, in logical order. 
        AT can lists these and jump to them (and use them as bypass blocks along with landmarks). 
        They are a table of contents for the page.
    </p>
    <p>
        Inspect the code, Chrome Developer Tools. Check headings and search for headings, check order.
    </p>
    <h4 class="h5">Buttons and Links</h4>
    <p>
        Links are for navigation, change of context. Buttons are for actions.
    </p>
    <p>
        Links should have unique text and not have text like "read more" (see coding lab).
    </p>
    <p>
        The visuall label should preferebly match the accessible name.
    </p>
    <p>
        Remember the Google Chrome Accessibility Tab.
    </p>
    <p>
        Navigation links should be in the same order, accross all pages.
    </p>
    <p>
        Use consistent names for actions, such as submitting a form (for example dont mix "Submit", "Post", "Go").
    </p>
    <h4 class="h5">Images</h4>
    <p>
        Provide text alternative (that make sense), very important, first WCAG guideline.
    </p>
    <ul>
        <li>alt attribute</li>
        <li>aria-label</li>
        <li>aria-labelledby</li>
    </ul>
    <p>
        If image is nested in the a tag (and no text in the a tag), for example the logo (link to home page), 
        the alt text is calculated for the link text. If the a tag contains text, the accessibility link text 
        could be duplicate, consider using aria-hidden for the image (presentational only) and an empty alt="" attribute.
    </p>
    <p>
        Avoid images of text, for rezise reasons (logos are an exception, but prefer scalable SVG).
    </p>
    <h4 class="h5">Lists</h4>
    <p>
        ul or ol (for example steps) use correctly.
    </p>
    <h4 class="h5">Tables</h4>
    <p>
        Display tabular data. Use correctly. Use column headers (th in tr in thead), set scope, but if 
        omitted the browser calculates it to the best of its ability. 
        <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/th#attr-scope" target="_blank">MDN - Scope</a>
    </p>
    <p>
        Try to avoid complex tables.
    </p>
    <h4 class="h5">Forms</h4>
    <ul>
        <li>Use correct input type, for example type="email"</li>
        <li>Correct labels with for attribute</li>
        <li>No placeholder</li>
        <li>required attribute</li>
        <li>auto-complete attribute</li>
        <li>Give instructions</li>
        <li>Use novalidate attribute on form, for manual validation</li>
        <li>Use fieldset and legend (must be first child of fieldset element)</li>
        <li>Disabled attribute -- should we use?</li>
        <li>Use text, color and preferebly an icon also, for validation messages</li>
        <li>Also use aria-invalid</li>
        <li>Use aria-describedby to connect invalid field with error message</li>
    </ul>

</article>

{{/inline}}
{{/base}}